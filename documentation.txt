# Laravel Marketplace - Product & Category Management Documentation

## Overview
This documentation covers the comprehensive product and category management system for the Laravel Marketplace application, including product variations, attributes, image management, and administrative controls.

## Table of Contents
1. Category Management System
2. Product Management System
3. Product Variations & Attributes
4. Image Management
5. Admin Interface
6. API Endpoints
7. Database Schema
8. File Structure
9. Usage Examples

---

## 1. Category Management System

### Features
- Hierarchical category structure (parent/child relationships)
- Tree view interface with expandable/collapsible nodes
- Category-specific attributes definition
- Bulk operations (approve, reject, delete)
- Image upload for categories
- SEO-friendly slugs
- Active/inactive status management

### Key Files
- Model: `app/Models/Category.php`
- Controller: `app/Http/Controllers/Admin/CategoryController.php`
- Views: `resources/views/admin/categories/`
- Migration: `database/migrations/*_create_categories_table.php`

### Usage
```php
// Create a new category
$category = Category::create([
    'name' => 'Electronics',
    'slug' => 'electronics',
    'description' => 'Electronic devices and accessories',
    'parent_id' => null, // Root category
    'sort_order' => 1,
    'is_active' => true
]);

// Get root categories
$rootCategories = Category::rootCategories()->active()->get();

// Get category with children
$categoryWithChildren = Category::with('children')->find(1);
```

### Tree View Interface
- Location: `/admin/categories`
- Features:
  - Visual tree structure with connecting lines
  - Expand/collapse functionality
  - Drag-and-drop reordering (planned)
  - Search and filtering
  - Responsive design for mobile devices

---

## 2. Product Management System

### Features
- Complete product lifecycle management
- Multi-image upload and management
- SEO optimization (slugs, meta descriptions)
- Product approval workflow (pending/approved/rejected)
- Featured product designation
- Inventory tracking through variations
- Bulk operations for admin efficiency

### Key Files
- Model: `app/Models/Product.php`
- Controller: `app/Http/Controllers/Admin/ProductController.php`
- Views: `resources/views/admin/products/`
- Migration: `database/migrations/*_create_products_table.php`

### Product Properties
```php
// Product model fillable fields
protected $fillable = [
    'seller_id',
    'category_id',
    'name',
    'slug',
    'short_description',
    'description',
    'sku',
    'images',           // JSON array of image paths
    'status',           // pending, approved, rejected
    'rejection_reason',
    'is_featured',
    'weight',
    'dimensions',
];
```

### Product Creation Flow
1. **Basic Information**: Name, description, category, seller
2. **Image Upload**: Multiple images with preview
3. **Variations**: At least one variation required with price/stock
4. **Attributes**: Dynamic attributes based on category
5. **Settings**: Weight, dimensions, featured status
6. **Review**: Admin approval process

---

## 3. Product Variations & Attributes

### Product Variations
Product variations allow for different versions of the same product (size, color, etc.)

#### Variation Properties
```php
// ProductVariation model fillable fields
protected $fillable = [
    'product_id',
    'sku',              // Auto-generated if empty
    'price',
    'compare_price',    // Original price for discount display
    'stock_quantity',
    'low_stock_threshold',
    'image',            // Variation-specific image
    'attributes',       // JSON: {"size": "Large", "color": "Red"}
    'is_active',
];
```

#### Usage Example
```php
// Create product variation
$variation = ProductVariation::create([
    'product_id' => 1,
    'price' => 29.99,
    'compare_price' => 39.99,
    'stock_quantity' => 100,
    'low_stock_threshold' => 10,
    'attributes' => [
        'size' => 'Large',
        'color' => 'Red'
    ],
    'is_active' => true
]);

// Get product price range
$product = Product::find(1);
$minPrice = $product->min_price;
$maxPrice = $product->max_price;
$totalStock = $product->total_stock;
```

### Product Attributes
Dynamic attributes system allows categories to define custom product properties.

#### Attribute Types
- `text`: Single line text input
- `textarea`: Multi-line text input
- `number`: Numeric input
- `select`: Dropdown selection
- `multiselect`: Multiple selection dropdown
- `radio`: Radio button selection
- `checkbox`: Checkbox selection
- `boolean`: True/false toggle
- `date`: Date picker

#### Attribute Properties
```php
// ProductAttribute model fillable fields
protected $fillable = [
    'category_id',
    'name',
    'type',
    'options',          // JSON array for select types
    'is_required',
    'is_filterable',    // Can be used for product filtering
    'sort_order',
    'is_active',
];
```

#### Usage Example
```php
// Create category attribute
$attribute = ProductAttribute::create([
    'category_id' => 1,
    'name' => 'Screen Size',
    'type' => 'select',
    'options' => ['13"', '15"', '17"'],
    'is_required' => true,
    'is_filterable' => true,
    'sort_order' => 1
]);

// Get category attributes
$category = Category::find(1);
$attributes = $category->attributes()->active()->get();
```

---

## 4. Image Management

### Features
- Multiple image upload per product
- Image preview before upload
- Automatic image optimization (planned)
- Category-specific images
- Variation-specific images
- Image deletion on product/variation removal

### File Storage
- Storage location: `storage/app/public/products/`
- Public access: `public/storage/products/`
- Allowed formats: JPEG, PNG, JPG, GIF
- Maximum file size: 2MB per image

### Usage
```php
// Store product images
if ($request->hasFile('images')) {
    $images = [];
    foreach ($request->file('images') as $image) {
        $path = $image->store('products', 'public');
        $images[] = $path;
    }
    $product->images = $images;
}

// Display product main image
$mainImage = $product->main_image; // First image in array
$imageUrl = Storage::url($mainImage);
```

---

## 5. Admin Interface

### Dashboard Features
- Overview statistics (total products, pending approvals, etc.)
- Quick action buttons
- Recent activity feed
- Performance metrics

### Product Management Interface
- Comprehensive product listing with filtering
- Bulk operations (approve, reject, feature, delete)
- Advanced search functionality
- Product status management
- Image gallery view

### Category Management Interface
- Tree view with hierarchical display
- Category attribute management
- Bulk category operations
- Search and filtering
- Parent-child relationship management

### Access Control
All admin routes require authentication and admin role verification:
```php
private function checkAdminAccess()
{
    if (!auth()->check() || auth()->user()->role !== 'admin') {
        abort(403, 'Access denied');
    }
}
```

---

## 6. API Endpoints

### Admin Routes (Prefix: `/admin`)

#### Category Management
- `GET /admin/categories` - List all categories
- `GET /admin/categories/create` - Show create form
- `POST /admin/categories` - Store new category
- `GET /admin/categories/{category}` - Show category details
- `GET /admin/categories/{category}/edit` - Show edit form
- `PUT /admin/categories/{category}` - Update category
- `DELETE /admin/categories/{category}` - Delete category
- `POST /admin/categories/{category}/toggle-status` - Toggle active status

#### Product Management
- `GET /admin/products` - List all products with filtering
- `GET /admin/products/create` - Show create form
- `POST /admin/products` - Store new product
- `GET /admin/products/{product}` - Show product details
- `GET /admin/products/{product}/edit` - Show edit form
- `PUT /admin/products/{product}` - Update product
- `DELETE /admin/products/{product}` - Delete product
- `POST /admin/products/{product}/approve` - Approve product
- `POST /admin/products/{product}/reject` - Reject product
- `POST /admin/products/{product}/toggle-featured` - Toggle featured status
- `POST /admin/products/bulk-action` - Bulk operations

#### Attribute Management
- `GET /admin/attributes` - List all attributes
- `GET /admin/attributes/create` - Show create form
- `POST /admin/attributes` - Store new attribute
- `GET /admin/attributes/{attribute}` - Show attribute details
- `GET /admin/attributes/{attribute}/edit` - Show edit form
- `PUT /admin/attributes/{attribute}` - Update attribute
- `DELETE /admin/attributes/{attribute}` - Delete attribute
- `POST /admin/attributes/{attribute}/toggle-status` - Toggle status
- `GET /admin/categories/{category}/attributes` - Get category attributes (JSON)

---

## 7. Database Schema

### Categories Table
```sql
CREATE TABLE categories (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    slug VARCHAR(255) UNIQUE NOT NULL,
    description TEXT,
    image VARCHAR(255),
    parent_id BIGINT REFERENCES categories(id) ON DELETE CASCADE,
    sort_order INT DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);
```

### Products Table
```sql
CREATE TABLE products (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    seller_id BIGINT REFERENCES users(id) ON DELETE CASCADE,
    category_id BIGINT REFERENCES categories(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    slug VARCHAR(255) UNIQUE NOT NULL,
    short_description VARCHAR(500) NOT NULL,
    description TEXT NOT NULL,
    sku VARCHAR(100) UNIQUE,
    images JSON,
    status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
    rejection_reason TEXT,
    is_featured BOOLEAN DEFAULT FALSE,
    weight DECIMAL(8,2),
    dimensions VARCHAR(255),
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);
```

### Product Variations Table
```sql
CREATE TABLE product_variations (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    product_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
    sku VARCHAR(100) UNIQUE,
    price DECIMAL(10,2) NOT NULL,
    compare_price DECIMAL(10,2),
    stock_quantity INT NOT NULL DEFAULT 0,
    low_stock_threshold INT DEFAULT 5,
    image VARCHAR(255),
    attributes JSON,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);
```

### Product Attributes Table
```sql
CREATE TABLE product_attributes (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    category_id BIGINT REFERENCES categories(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    type ENUM('text', 'textarea', 'number', 'select', 'multiselect', 'radio', 'checkbox', 'boolean', 'date'),
    options JSON,
    is_required BOOLEAN DEFAULT FALSE,
    is_filterable BOOLEAN DEFAULT FALSE,
    sort_order INT DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);
```

---

## 8. File Structure

```
app/
├── Http/Controllers/Admin/
│   ├── CategoryController.php      # Category CRUD operations
│   ├── ProductController.php       # Product CRUD operations
│   └── AttributeController.php     # Attribute CRUD operations
├── Models/
│   ├── Category.php               # Category model with relationships
│   ├── Product.php                # Product model with variations
│   ├── ProductVariation.php       # Product variation model
│   └── ProductAttribute.php       # Dynamic attribute model

resources/views/admin/
├── categories/
│   ├── index.blade.php            # Category listing (hierarchical)
│   ├── tree-index.blade.php       # Tree view interface
│   ├── create.blade.php           # Category creation form
│   ├── edit.blade.php             # Category edit form
│   ├── show.blade.php             # Category details view
│   └── partials/
│       └── tree-node.blade.php    # Recursive tree node component
├── products/
│   ├── index.blade.php            # Product listing with filters
│   ├── create.blade.php           # Product creation form
│   ├── edit.blade.php             # Product edit form
│   └── show.blade.php             # Product details view
└── attributes/
    ├── index.blade.php            # Attribute listing
    ├── create.blade.php           # Attribute creation form
    ├── edit.blade.php             # Attribute edit form
    └── show.blade.php             # Attribute details view

database/migrations/
├── *_create_categories_table.php
├── *_create_products_table.php
├── *_create_product_variations_table.php
└── *_create_product_attributes_table.php

storage/app/public/
├── products/                      # Product images
└── categories/                    # Category images
```

---

## 9. Usage Examples

### Creating a Complete Product with Variations

```php
// 1. Create the main product
$product = Product::create([
    'seller_id' => 1,
    'category_id' => 2,
    'name' => 'Premium T-Shirt',
    'slug' => 'premium-t-shirt',
    'short_description' => 'High-quality cotton t-shirt available in multiple sizes and colors',
    'description' => 'This premium t-shirt is made from 100% organic cotton...',
    'sku' => 'TSHIRT-001',
    'images' => ['products/tshirt-main.jpg', 'products/tshirt-side.jpg'],
    'status' => 'approved',
    'is_featured' => true,
    'weight' => 0.2,
    'dimensions' => '30x40x2 cm'
]);

// 2. Create variations for different sizes and colors
$variations = [
    ['size' => 'Small', 'color' => 'Red', 'price' => 19.99, 'stock' => 50],
    ['size' => 'Small', 'color' => 'Blue', 'price' => 19.99, 'stock' => 30],
    ['size' => 'Medium', 'color' => 'Red', 'price' => 21.99, 'stock' => 75],
    ['size' => 'Medium', 'color' => 'Blue', 'price' => 21.99, 'stock' => 60],
    ['size' => 'Large', 'color' => 'Red', 'price' => 23.99, 'stock' => 40],
    ['size' => 'Large', 'color' => 'Blue', 'price' => 23.99, 'stock' => 25],
];

foreach ($variations as $variation) {
    ProductVariation::create([
        'product_id' => $product->id,
        'price' => $variation['price'],
        'compare_price' => $variation['price'] + 5, // Show discount
        'stock_quantity' => $variation['stock'],
        'low_stock_threshold' => 10,
        'attributes' => [
            'size' => $variation['size'],
            'color' => $variation['color']
        ],
        'is_active' => true
    ]);
}
```

### Setting Up Category Attributes

```php
// 1. Create a category
$category = Category::create([
    'name' => 'Clothing',
    'slug' => 'clothing',
    'description' => 'Fashion and apparel items',
    'is_active' => true
]);

// 2. Define attributes for the category
$attributes = [
    [
        'name' => 'Size',
        'type' => 'select',
        'options' => ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
        'is_required' => true,
        'is_filterable' => true,
        'sort_order' => 1
    ],
    [
        'name' => 'Color',
        'type' => 'select',
        'options' => ['Red', 'Blue', 'Green', 'Black', 'White'],
        'is_required' => true,
        'is_filterable' => true,
        'sort_order' => 2
    ],
    [
        'name' => 'Material',
        'type' => 'select',
        'options' => ['Cotton', 'Polyester', 'Silk', 'Wool', 'Linen'],
        'is_required' => false,
        'is_filterable' => true,
        'sort_order' => 3
    ],
    [
        'name' => 'Care Instructions',
        'type' => 'textarea',
        'is_required' => false,
        'is_filterable' => false,
        'sort_order' => 4
    ]
];

foreach ($attributes as $attribute) {
    ProductAttribute::create(array_merge($attribute, [
        'category_id' => $category->id,
        'is_active' => true
    ]));
}
```

### Frontend Product Display

```php
// Controller method for product listing
public function index(Request $request)
{
    $query = Product::with(['category', 'variations', 'seller'])
                   ->approved();
    
    // Apply filters based on request
    if ($request->filled('category_id')) {
        $query->where('category_id', $request->category_id);
    }
    
    if ($request->filled('min_price')) {
        $query->whereHas('variations', function($q) use ($request) {
            $q->where('price', '>=', $request->min_price);
        });
    }
    
    if ($request->filled('max_price')) {
        $query->whereHas('variations', function($q) use ($request) {
            $q->where('price', '<=', $request->max_price);
        });
    }
    
    $products = $query->paginate(12);
    
    return view('products.index', compact('products'));
}

// Blade template usage
@foreach($products as $product)
    <div class="product-card">
        <img src="{{ Storage::url($product->main_image) }}" alt="{{ $product->name }}">
        <h3>{{ $product->name }}</h3>
        <p>{{ $product->short_description }}</p>
        <div class="price">
            @if($product->min_price != $product->max_price)
                ${{ number_format($product->min_price, 2) }} - ${{ number_format($product->max_price, 2) }}
            @else
                ${{ number_format($product->min_price, 2) }}
            @endif
        </div>
        <div class="stock">
            @if($product->in_stock)
                <span class="in-stock">In Stock ({{ $product->total_stock }})</span>
            @else
                <span class="out-of-stock">Out of Stock</span>
            @endif
        </div>
    </div>
@endforeach
```

### Advanced Filtering with Attributes

```php
// Filter products by dynamic attributes
public function filterByAttributes(Request $request)
{
    $query = Product::with(['variations'])
                   ->approved();
    
    // Filter by category attributes
    if ($request->filled('attributes')) {
        foreach ($request->attributes as $attributeName => $value) {
            $query->whereHas('variations', function($q) use ($attributeName, $value) {
                $q->whereJsonContains('attributes->' . $attributeName, $value);
            });
        }
    }
    
    $products = $query->paginate(12);
    
    return response()->json($products);
}

// JavaScript for dynamic filtering
fetch('/api/products/filter', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({
        attributes: {
            size: 'Large',
            color: 'Red',
            material: 'Cotton'
        },
        min_price: 20,
        max_price: 50
    })
})
.then(response => response.json())
.then(products => {
    // Update product listing
    updateProductDisplay(products);
});
```

---

## 10. Best Practices

### Performance Optimization
1. **Eager Loading**: Always use `with()` to prevent N+1 queries
2. **Indexing**: Ensure database indexes on frequently queried fields
3. **Caching**: Implement caching for category trees and product listings
4. **Image Optimization**: Use image optimization services for better performance

### Security Considerations
1. **Input Validation**: Always validate user inputs, especially file uploads
2. **Authorization**: Implement proper role-based access control
3. **SQL Injection**: Use Eloquent ORM to prevent SQL injection attacks
4. **File Upload Security**: Validate file types and sizes

### Code Organization
1. **Single Responsibility**: Keep controllers focused on specific actions
2. **Model Relationships**: Define clear relationships between models
3. **Form Requests**: Use form request classes for complex validations
4. **Resource Classes**: Use API resource classes for consistent JSON responses

### User Experience
1. **Progressive Enhancement**: Ensure functionality works without JavaScript
2. **Mobile First**: Design responsive interfaces for mobile devices
3. **Loading States**: Provide visual feedback during async operations
4. **Error Handling**: Display user-friendly error messages

---

## 11. Troubleshooting

### Common Issues

#### Image Upload Problems
- **Issue**: Images not displaying after upload
- **Solution**: Ensure storage link is created (`php artisan storage:link`)
- **Check**: Verify file permissions on storage directory

#### Variation Attributes Not Saving
- **Issue**: JSON attributes not being stored properly
- **Solution**: Ensure attributes are valid JSON format
- **Check**: Validate JSON structure before saving

#### Category Tree Not Loading
- **Issue**: Tree view showing empty or incorrect hierarchy
- **Solution**: Verify parent_id relationships are correct
- **Check**: Ensure no circular references in category hierarchy

#### Performance Issues
- **Issue**: Slow product listing page
- **Solution**: Implement proper indexing and eager loading
- **Check**: Use Laravel Debugbar to identify slow queries

### Debugging Commands

```bash
# Clear application cache
php artisan cache:clear

# Recompile views
php artisan view:clear

# Regenerate autoloader
composer dump-autoload

# Run migrations
php artisan migrate

# Seed database
php artisan db:seed

# Create storage link
php artisan storage:link

# Check routes
php artisan route:list --name=admin

# Monitor database queries
php artisan tinker
DB::enableQueryLog();
// Perform actions
DD(DB::getQueryLog());
```

---

This documentation provides a comprehensive guide to the product and category management system. For additional support or feature requests, please refer to the project repository or contact the development team.